{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import re\n",
    "from datetime import datetime as dt\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index([u'Date', u'id', u'Time', u'Age', u'Sex', u'Consulting  Doctor',\n",
      "       u'Specialty', u'Procedure', u'Total  Charges', u'Amount  Received ',\n",
      "       u'Amount  Balance', u'Amount Received By', u'Amount in Hospital',\n",
      "       u'Receptionist  Name', u'Next Apt'],\n",
      "      dtype='object')\n",
      "Frequently Visited Day:\n",
      "<bound method Series.idxmax of Monday    51\n",
      "Name: Day, dtype: int64>\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\ittrat.wafa\\AppData\\Local\\Continuum\\Anaconda2\\lib\\site-packages\\ipykernel\\__main__.py:28: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "C:\\Users\\ittrat.wafa\\AppData\\Local\\Continuum\\Anaconda2\\lib\\site-packages\\ipykernel\\__main__.py:25: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "C:\\Users\\ittrat.wafa\\AppData\\Local\\Continuum\\Anaconda2\\lib\\site-packages\\ipykernel\\__main__.py:26: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Average Age: 32.4115120275\n",
      "No of Children:\n",
      "25\n",
      "Most Common Procedure based on Gender:\n",
      "Sex\n",
      "F    Consultation\n",
      "M    Consultation\n",
      "dtype: object\n",
      "Highest Earning Doctor: Dr Alaf Khan\n",
      "Highest Earning Procedure: Orthodontics\n",
      "Frequent Time:\n",
      "13.0\n",
      "Index([u'index', u'Date', u'id', u'Time', u'Age', u'Sex',\n",
      "       u'Consulting  Doctor', u'Specialty', u'Procedure', u'Total  Charges',\n",
      "       u'Amount  Received ', u'Amount  Balance', u'Amount Received By',\n",
      "       u'Amount in Hospital', u'Receptionist  Name', u'Next Apt', u'Day',\n",
      "       u'Time Bracket'],\n",
      "      dtype='object')\n",
      "   index              Date   id                Time   Age Sex  \\\n",
      "0      0  January 01, 2017  101 1900-01-01 23:00:00  40.0   F   \n",
      "1      1  January 02, 2017  150 1900-01-01 10:45:00  26.0   M   \n",
      "2      2  January 02, 2017   58 1900-01-01 12:38:00  30.0   F   \n",
      "3      3  January 02, 2017   75 1900-01-01 13:00:00  40.0   M   \n",
      "4      4  January 02, 2017   97 1900-01-01 14:45:00  27.0   M   \n",
      "\n",
      "  Consulting  Doctor        Specialty     Procedure  Total  Charges  \\\n",
      "0      Dr Kinza Alam            Gynae     C Section         30000.0   \n",
      "1      Nursing Staff              NaN      Dressing          1500.0   \n",
      "2   Dr Riffat Naheed  Psychotherapist  Consultation          1000.0   \n",
      "3   Dr Riffat Naheed  Psychotherapist  Consultation          1500.0   \n",
      "4   Dr Riffat Naheed  Psychotherapist  Consultation          2000.0   \n",
      "\n",
      "   Amount  Received  Amount  Balance Amount Received By  Amount in Hospital  \\\n",
      "0            30000.0            -           Mrs Shamsa                  NaN   \n",
      "1             1500.0            -            Dr Saniya                  NaN   \n",
      "2             1000.0            -           Mrs Shamsa                300.0   \n",
      "3             1500.0            -           Mrs Shamsa                450.0   \n",
      "4             2000.0            -           Mrs Shamsa                600.0   \n",
      "\n",
      "  Receptionist  Name Next Apt     Day Time Bracket  \n",
      "0              Hamza      NaN  Sunday        Night  \n",
      "1              Haris      NaN  Monday      Morning  \n",
      "2               Fiza      NaN  Monday      Morning  \n",
      "3             Zaheer      NaN  Monday    Afternoon  \n",
      "4              Haris      NaN  Monday    Afternoon  \n",
      "No of repeated visitor: \n",
      "37\n",
      "Id of repeated visitor: \n",
      "1      12\n",
      "46      5\n",
      "122     5\n",
      "140     4\n",
      "94      4\n",
      "17      4\n",
      "45      3\n",
      "101     3\n",
      "63      3\n",
      "132     3\n",
      "114     3\n",
      "109     3\n",
      "107     3\n",
      "145     3\n",
      "20      2\n",
      "97      2\n",
      "59      2\n",
      "88      2\n",
      "96      2\n",
      "112     2\n",
      "116     2\n",
      "118     2\n",
      "25      2\n",
      "80      2\n",
      "120     2\n",
      "40      2\n",
      "100     2\n",
      "64      2\n",
      "4       2\n",
      "133     2\n",
      "12      2\n",
      "13      2\n",
      "150     2\n",
      "149     2\n",
      "151     2\n",
      "130     2\n",
      "153     2\n",
      "Name: id, dtype: int64\n",
      "Patients Visited Again for Same Problem\n",
      "id\n",
      "12     2\n",
      "13     2\n",
      "17     4\n",
      "20     2\n",
      "25     2\n",
      "40     2\n",
      "45     3\n",
      "63     3\n",
      "80     2\n",
      "88     2\n",
      "96     2\n",
      "97     2\n",
      "100    2\n",
      "101    3\n",
      "107    2\n",
      "109    3\n",
      "112    2\n",
      "114    3\n",
      "116    2\n",
      "118    2\n",
      "120    2\n",
      "130    2\n",
      "132    3\n",
      "133    2\n",
      "140    4\n",
      "145    3\n",
      "149    2\n",
      "151    2\n",
      "153    2\n",
      "Name: Specialty, dtype: int64\n",
      "Median Age of Females and Males\n",
      "Sex\n",
      "F    30.0\n",
      "M    29.0\n",
      "Name: Age, dtype: float64\n",
      "[nan '14000' '3000' '90000' '22000' '500']\n",
      "Total Amount in Balance\n",
      "222500.0\n",
      "Money Made for Consultation:\n",
      "83950.0\n",
      "Correlation between Age and Total Charges\n",
      "0.031218557085\n",
      "The Age Group having Highest Number of Visits based\n",
      "(25, 30]\n",
      "Total Money Made\n",
      "22300.0\n"
     ]
    }
   ],
   "source": [
    "# Q1: Loading Dataset \n",
    "hosp_data = pd.read_table(\"./hospitaldata.csv\", sep=\",\", index_col = False, nrows = 223, error_bad_lines = False)\n",
    "\n",
    "#Print shows that hosp_data have an Unnamed Column. Hence following commnad will drop the last column!\n",
    "hosp_data = hosp_data.drop('Unnamed: 15', axis = 1) \n",
    "\n",
    "#Removing the dot from headers\n",
    "hosp_data.columns = [str.replace(x, \".\", \" \") for x in hosp_data.columns]\n",
    "print hosp_data.columns\n",
    "\n",
    "#Q2: Which day of the week is expected to have most visits?\n",
    "\n",
    "#Splitting Date into Day and Date Column\n",
    "hosp_data['Day'], hosp_data['Date'] = zip(*hosp_data['Date'].apply(lambda x: x.split(\", \" , 1)))\n",
    "\n",
    "#Calculating most frequently visited day\n",
    "freq_day = hosp_data[\"Day\"].value_counts().nlargest(1).idxmax\n",
    "print \"Frequently Visited Day:\"\n",
    "print freq_day\n",
    "\n",
    "#Q3: What is the average age of patients?\n",
    "#Cleaning the Age Column\n",
    "for i in range(len(hosp_data[\"Age\"])):\n",
    "    if \"M\" in str(hosp_data[\"Age\"][i]):\n",
    "        hosp_data[\"Age\"][i] = hosp_data[\"Age\"][i].replace(\"M\", \"\")\n",
    "        hosp_data[\"Age\"][i] = str(float(hosp_data[\"Age\"][i])/12)\n",
    "    elif(hosp_data[\"Age\"][i] == \"-\"):\n",
    "        hosp_data[\"Age\"][i] = np.nan\n",
    "    elif(hosp_data[\"Age\"][i] == \"nan\"):\n",
    "        hosp_data[\"Age\"][i] = np.nan\n",
    "        \n",
    "\n",
    "#Average Age\n",
    "hosp_data[\"Age\"] = hosp_data[\"Age\"].astype(float)\n",
    "average_age = hosp_data.Age.mean()\n",
    "print \"Average Age: \" +str(average_age)\n",
    "\n",
    "#Q4: How many children were entertained? (Make a Bracket of Age from 1-12)\n",
    "No_of_children = len(hosp_data[hosp_data.Age <= 12])\n",
    "print \"No of Children:\"\n",
    "print No_of_children\n",
    "\n",
    "#Q5: Which gender type had what kind of procedure in abundance? i.e. Female visit mostly because of Gynae Problem\n",
    "#Cleaning the Sex Column\n",
    "hosp_data.Sex.replace( [r\"f\", \"\\-|\\s\"], [r\"F\", np.nan], inplace=True, regex=True)\n",
    "\n",
    "#Finding common Procedure based on gender\n",
    "print \"Most Common Procedure based on Gender:\"\n",
    "print hosp_data.groupby(['Procedure','Sex']).size().unstack().idxmax()\n",
    "hosp_data.reset_index(inplace=True)\n",
    "\n",
    "#Q6: Which Doctor is earning highest?\n",
    "hosp_data['Total  Charges'].replace( [\"Cancelled\"], [np.nan], inplace=True)\n",
    "hosp_data['Total  Charges'] = pd.to_numeric(hosp_data['Total  Charges'])\n",
    "\n",
    "highest_earning_doc = hosp_data.groupby(['Consulting  Doctor'])['Total  Charges'].sum().idxmax()\n",
    "print \"Highest Earning Doctor: \" +highest_earning_doc\n",
    "\n",
    "#Q7: Which procedure type earns more money?\n",
    "highest_earning_procedure = hosp_data.groupby(['Procedure'])['Total  Charges'].sum().idxmax()\n",
    "print \"Highest Earning Procedure: \" +highest_earning_procedure\n",
    "\n",
    "#Q8: Which time of the day has highest frequency of visits by hour?\n",
    "#Cleaning the Time Columns\n",
    "def time_clean(x):   \n",
    "    x = str(x)    \n",
    "    if \"M\" in x:        \n",
    "        return x    \n",
    "    elif bool(re.search(r'\\d', x)):        \n",
    "        return x + \"PM\"    \n",
    "    else:        \n",
    "        return np.nan\n",
    "\n",
    "hosp_data.Time = [time_clean(x) for x in hosp_data.Time] \n",
    "hosp_data.Time = [dt.strptime(x, '%I:%M%p') if x is not np.nan else np.nan for x in hosp_data.Time]\n",
    "hour =[]\n",
    "for i in hosp_data.Time:\n",
    "    hour.append(i.hour)\n",
    "\n",
    "#Calculating the most frequent time\n",
    "freq_time = hosp_data.groupby([hour]).Time.count().idxmax()\n",
    "print \"Frequent Time:\"\n",
    "print freq_time\n",
    "\n",
    "#Q9:Create a bracket of time by Morning, Afternoon, Evening, Night \n",
    "#(6am – 12pm – Morning, 12 pm- 4 pm, Afternoon, 4 pm- 7pm, Evening, 7pm – 6 am, Night).\n",
    "\n",
    "#create list by adding min and max to cut_points\n",
    "break_points = [6, 12, 16, 19, 23]\n",
    "labels = [\"Morning\",\"Afternoon\",\"Evening\", \"Night\"]\n",
    "#Binning using cut function of pandas\n",
    "colBin = pd.cut(hour,bins=break_points,labels=labels,include_lowest=True)\n",
    "hosp_data[\"Time Bracket\"] = colBin \n",
    "\n",
    "print hosp_data.columns\n",
    "print hosp_data.head()\n",
    "\n",
    "#Q10: How many patients are repeated visitors?\n",
    "freq_of_visitors = hosp_data[\"id\"].value_counts()\n",
    "repeated_visitors = sum(freq_of_visitors > 1)\n",
    "print \"No of repeated visitor: \" \n",
    "print repeated_visitors\n",
    "\n",
    "#Q11: Give us the id of repeated visitors.\n",
    "id_repeated_visitors = freq_of_visitors[freq_of_visitors > 1]\n",
    "print \"Id of repeated visitor: \" \n",
    "print id_repeated_visitors\n",
    "\n",
    "#Q12: Which patients visited again for the same problem?\n",
    "pat_visit_count = hosp_data.groupby([\"id\"]).Specialty.count()\n",
    "print \"Patients Visited Again for Same Problem\"\n",
    "print pat_visit_count[pat_visit_count > 1]\n",
    "\n",
    "#Q13: What is the median age for Females and Males?\n",
    "med_age = hosp_data.groupby([\"Sex\"]).Age.apply(np.nanmedian)\n",
    "print \"Median Age of Females and Males\"\n",
    "print med_age\n",
    "\n",
    "#Q14: What is the total amount in balance?\n",
    "hosp_data[\"Amount  Balance\"].replace( [\"\\-\", \",\", \"\\\\.00$\"], [np.nan, \"\", \"\"], inplace=True, regex=True)\n",
    "print hosp_data[\"Amount  Balance\"].unique()\n",
    "hosp_data[\"Amount  Balance\"] = pd.to_numeric(hosp_data[\"Amount  Balance\"], errors= coerce)\n",
    "total_amount_balance = hosp_data[\"Amount  Balance\"].sum()\n",
    "print \"Total Amount in Balance\" \n",
    "print total_amount_balance\n",
    "\n",
    "#Q15: How much money was made by Procedure Type “Consultation”?\n",
    "money_made = np.nansum(hosp_data.loc[hosp_data['Procedure'] == 'Consultation', 'Total  Charges'])\n",
    "print \"Money Made for Consultation:\"\n",
    "print money_made\n",
    "\n",
    "#Q16: Is there a relation between Age and Total Charges paid?\n",
    "corr = hosp_data[\"Age\"].corr(hosp_data['Total  Charges']) \n",
    "print \"Correlation between Age and Total Charges\"\n",
    "print corr\n",
    "\n",
    "#Q17: Which Age group had highest number of visits?\n",
    "age_range = pd.cut(hosp_data[\"Age\"], np.arange(0,80,5), right=True)\n",
    "high_age_group = hosp_data.groupby([age_range]).Age.count()\n",
    "print \"The Age Group having Highest Number of Visits based\"\n",
    "print high_age_group.idxmax()\n",
    "\n",
    "#Q18: What is the total cost earned by Procedure Type X Ray and Scalling together?\n",
    "total_money_made = hosp_data[(hosp_data.Procedure == \"X Ray\") | (hosp_data.Procedure == \"Scalling\")][\"Total  Charges\"].sum()\n",
    "print \"Total Money Made\"\n",
    "print total_money_made \n",
    "\n",
    "#Saving Clean dataset\n",
    "hosp_data.to_csv(\"C:/Users/ittrat.wafa/Desktop/IttratWafa_Rwp_Python_Assignment2/Cleanhospitaldata.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
